#!/usr/bin/env python

# Arguments and libraries
import argparse,subprocess,sys,re, numpy as np
parser = argparse.ArgumentParser(description='Align primers to a\
    reference file using BLAST and return a list of the most specific\
    primers available.')
parser.add_argument('-f', help='Check only forward primers',
        dest='f', action='store_true')
parser.add_argument('-r', help='Check only reverse primers',
        dest='r', action='store_true')
parser.add_argument('-n', help='Number of best primers to find (1)',
        metavar='<int>', default=1)
parser.add_argument('-X', help='Number of expected query matches in\
    reference sequence (1)', metavar='<int>', default=1)
parser.add_argument('-Q', help='Minimum acceptable % query coverage.',
        metavar='<int>', default=75)
parser.add_argument('-S', help='Subject file for alignment.',
        metavar='<str>', default="")
parser.add_argument('-D', help='Database file for alignment.',
        metavar='<str>', default="")
parser.add_argument('-O', help='Other BLAST options.',
        metavar='<str>', default="")
parser.add_argument('reportfile', help='Path to report file.',
        metavar='<report_file>')
args = parser.parse_args()

# Determine BLAST command string:
fstring = "\'qseqid sseqid pident qcovhsp length mismatch gapopen gaps sstrand qstart qend sstart send\'"
blast_cmd = ["blastn", "-best_hit_overhang", "0.25", 
    "-best_hit_score_edge", "0.05", "-qcov_hsp_perc", str(args.Q),
    "-outfmt", "6 " + fstring, "-task", "blastn-short"]
if len(args.D) > 0:
    blast_cmd += ["-db", str(args.D)]
elif len(args.S) > 0:
    blast_cmd += ["-subject", str(args.S)]
else:
    sys.exit("Error: No subject or database file specified.")
if len(args.O)>0:
    blast_cmd += str(args.O).split(" ")

# BLAST alignment call function
def blastcount(sequence):
    echo = subprocess.Popen(["echo", str(sequence)], stdout=subprocess.PIPE)
    blast = subprocess.Popen(blast_cmd, stdin=echo.stdout, stdout=subprocess.PIPE)
    output = blast.communicate()[0].split("\n")[:-1]
    return len(output)

# Read and process report file
report = open(args.reportfile, 'r').read().split('\n')[:-1]
rdict = {}
for line in report:
    if re.search('PRIMER_.*_SEQUENCE', line):
        n = int(re.findall("\d+", line)[0])
        splitline = line.split("=")
        if "LEFT" in splitline[0]:
            key="left"
        elif "RIGHT" in splitline[0]:
            key="right"
        else:
            sys.exit("Misformatted report file.")
        if n not in rdict.keys():
            rdict[n] = {}
        rdict[n][key] = splitline[1]
npairs = max(rdict.keys())

# Find best primer pair indices
best = {"names":np.array([], dtype=int),"counts":np.array([], dtype=int)}
for n in range(npairs + 1):
    # Get match counts
    matches=0
    if not args.r:
        matches = max(blastcount(rdict[n]["left"]), matches)
    if not args.f:
        matches = max(blastcount(rdict[n]["right"]), matches)
    # Update best primers
    if len(best["names"]) < int(args.n):
        best["names"] = np.append(best["names"], n)
        best["counts"] = np.append(best["counts"], matches)
    elif np.max(best["counts"]) > matches:
        worst = np.nonzero((best["counts"] == np.max(best["counts"])))[0][-1]
        best["names"] = np.append(np.delete(best["names"], worst), n)
        best["counts"] = np.append(np.delete(best["counts"], worst), matches)
    # Print and exit if enough good primer pairs found
    if len(best["names"]) == int(args.n) and np.max(best["counts"]) <= int(args.X):
        # Order pairs according to ascending match count
        #print >> sys.stderr, best # for debugging
        out = best["names"][np.argsort(best["counts"])]
        print ' '.join(map(str, out))
        sys.exit()

# Print best output and exit:
#print >> sys.stderr, best # for debugging
out = best["names"][np.argsort(best["counts"])]
print "!" + ' '.join(map(str, out))
sys.exit()
